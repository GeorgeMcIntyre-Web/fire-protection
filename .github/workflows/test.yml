name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint || true  # Don't fail on lint errors for now
      
      - name: Run tests
        run: npm run test:run
      
      - name: Generate coverage report
        run: npm run coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
          retention-days: 30
      
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          delete-old-comments: true

  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate coverage
        run: npm run coverage
      
      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          npm run coverage -- --reporter=json-summary
          
          # Extract coverage percentages
          LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          
          echo "Coverage Summary:"
          echo "  Lines: ${LINES}%"
          echo "  Statements: ${STATEMENTS}%"
          echo "  Functions: ${FUNCTIONS}%"
          echo "  Branches: ${BRANCHES}%"
          
          # Check if coverage meets minimum threshold (80%)
          THRESHOLD=80
          PASSING=true
          
          if (( $(echo "$LINES < $THRESHOLD" | bc -l) )); then
            echo "❌ Lines coverage ${LINES}% is below threshold ${THRESHOLD}%"
            PASSING=false
          fi
          
          if (( $(echo "$STATEMENTS < $THRESHOLD" | bc -l) )); then
            echo "❌ Statements coverage ${STATEMENTS}% is below threshold ${THRESHOLD}%"
            PASSING=false
          fi
          
          if (( $(echo "$FUNCTIONS < $THRESHOLD" | bc -l) )); then
            echo "❌ Functions coverage ${FUNCTIONS}% is below threshold ${THRESHOLD}%"
            PASSING=false
          fi
          
          if (( $(echo "$BRANCHES < $THRESHOLD" | bc -l) )); then
            echo "❌ Branches coverage ${BRANCHES}% is below threshold ${THRESHOLD}%"
            PASSING=false
          fi
          
          if [ "$PASSING" = false ]; then
            echo ""
            echo "⚠️  Coverage check failed. Minimum threshold is ${THRESHOLD}%"
            exit 1
          fi
          
          echo "✅ All coverage thresholds met!"

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run type check
        run: npx tsc --noEmit

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Run security audit
        run: npm audit --audit-level=moderate || true
      
      - name: Check for outdated packages
        run: npm outdated || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, coverage-check, build, type-check]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test.result }}" == "success" ] && \
             [ "${{ needs.coverage-check.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ] && \
             [ "${{ needs.type-check.result }}" == "success" ]; then
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed. Please review the logs.**" >> $GITHUB_STEP_SUMMARY
          fi
